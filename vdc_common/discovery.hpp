//
//  Copyright (c) 2015-2022 plan44.ch / Lukas Zeller, Zurich, Switzerland
//
//  Author: Lukas Zeller <luz@plan44.ch>
//
//  This file is part of p44vdc.
//
//  p44vdc is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  p44vdc is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with p44vdc. If not, see <http://www.gnu.org/licenses/>.
//

#ifndef __p44vdc__discovery__
#define __p44vdc__discovery__

#include "p44vdc_common.hpp"

#if !DISABLE_DISCOVERY

#include "dsuid.hpp"
#include "vdchost.hpp"
#include "dnssd.hpp"

using namespace std;

namespace p44 {

  /// Implements service announcement for vdc host (vDC API, optionally website and ssh)
  class ServiceAnnouncer : public P44Obj
  {
    typedef P44Obj inherited;

    // publishing information
    // - common for all services
    string mHostname;
    // - for dS service advertising
    VdcHostPtr mVdcHost;
    bool mNoAuto;
    int mPublishWebPort;
    string mPublishWebPath;
    int mPublishSshPort;

    // private constructor, use sharedServiceAnnouncer() to obtain singleton
    ServiceAnnouncer();

  public:

    /// get shared instance (singleton)
    static ServiceAnnouncer &sharedServiceAnnouncer();

    virtual ~ServiceAnnouncer();

    /// advertise p44vdc (or the vdsm, if same platform hosts a auxiliary vdsm and no master vdsm is found)
    /// @note can be called repeatedly to update information
    /// @param aHostname the hostname to use. If NULL is passed, a hostname will be autogenerated based on MAC address
    /// @param aVdcHost the device container to be published
    /// @param aNoAuto if set, the published vdc will not be automatically connected (only when explicitly whitelisted)
    /// @param aWebPort if set, a _http._tcp service will be published as well
    /// @param aWebPath the web path to publish (when aWebPort is set)
    /// @param aSshPort if set, a _ssh._tcp service will be published as well
    void advertiseVdcHostDevice(
      const char *aHostname,
      VdcHostPtr aVdcHost,
      bool aNoAuto,
      int aWebPort, const string aWebPath,
      int aSshPort
    );

    /// Refresh advertising the device
    /// @note: advertising may or may not include dS-vdc, web and ssh
    void refreshAdvertisingDevice();

  private:

    bool serviceCallback(ErrorPtr aStatus);
    void advertisingCallback(ErrorPtr aStatus);

  };

  typedef boost::intrusive_ptr<ServiceAnnouncer> ServiceAnnouncerPtr;


} // namespace p44

#endif // !DISABLE_DISCOVERY
#endif // __p44vdc__discovery__
